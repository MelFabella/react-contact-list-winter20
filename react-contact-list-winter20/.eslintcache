[{"/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/reportWebVitals.js":"1","/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/components/contacts/ContactForm.js":"2","/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/App.js":"3","/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/components/contacts/ContactList.js":"4"},{"size":362,"mtime":1608086541062,"results":"5","hashOfConfig":"6"},{"size":1117,"mtime":1609093966678,"results":"7","hashOfConfig":"6"},{"size":1590,"mtime":1609052507402,"results":"8","hashOfConfig":"6"},{"size":286,"mtime":1608090864720,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rt4xls",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/reportWebVitals.js",[],"/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/components/contacts/ContactForm.js",[],"/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/App.js",["20"],"import { Component } from 'react';\nimport ContactList from './components/contacts/ContactList';\nimport ContactForm from './components/contacts/ContactForm';\n\nclass App extends Component {\n  state = { contacts: [\n    { id: 1, firstName: 'bob', phone: '123-234-2134' },\n    { id: 2, firstName: 'jill', phone: '113-234-2134' },\n    { id: 3, firstName: 'rick', phone: '123-554-2134' },\n    // { id: 54, firstName: 'tom', phone: '12342`134543'}\n  ]}\n\n  getId = () => {\n    // NOTE We are just using this as a helper function for id's since we aren't using a db yet\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  };\n  \n                // { firstName: 'tom', phone: '123213' }\n  addContact = (incomingContact) => {\n    // let newContact = { id: this.getId(), firstName: incomingContact.firstName, phone: incomingContact.phone }\n    const { contacts } = this.state\n                    //  { 65, firstName: 'tom', phone: '123213'}\n    let newContact = { id: this.getId(), ...incomingContact }\n    this.setState({ contacts: [ newContact, ...contacts ] })\n  }\n\n  removeContact = (id) => {\n    const contacts = this.state.contacts.filter( contact => {\n      if (contact.id !== id) {\n        return contact\n      }\n    })\n    this.setState({ contacts: [...contacts]})\n  }\n\n  render() {\n    const { contacts } = this.state\n    return (\n      <>\n        <h1>React Contact List</h1>\n        <ContactForm addContact={this.addContact} />\n        <ContactList contacts={contacts} removeContact={this.removeContact} />\n      </>\n    )\n  }\n}\n\nexport default App;",["21","22"],"/Users/user./Desktop/dpl_winter20/react-contact-list-winter20/src/components/contacts/ContactList.js",[],{"ruleId":"23","severity":1,"message":"24","line":30,"column":58,"nodeType":"25","messageId":"26","endLine":30,"endColumn":60},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-global-assign","no-unsafe-negation"]